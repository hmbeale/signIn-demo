{"version":3,"sources":["components/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","main","Object","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","paper","marginTop","flexDirection","alignItems","padding","concat","avatar","margin","backgroundColor","palette","secondary","form","submit","props","classes","react_default","a","createElement","className","CssBaseline_default","Paper_default","Avatar_default","LockOutlined_default","Typography_default","component","variant","FormControl_default","required","fullWidth","InputLabel_default","htmlFor","Input_default","id","name","autoComplete","autoFocus","type","FormControlLabel_default","control","Checkbox_default","value","color","label","Button_default","App","components_SignIn","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gYAkGeA,eAnFA,SAAAC,GAAK,MAAK,CACvBC,KAAKC,OAAAC,EAAA,EAAAD,CAAA,CACHE,MAAO,OACPC,QAAS,QACTC,WAAiC,EAArBN,EAAMO,QAAQC,KAC1BC,YAAkC,EAArBT,EAAMO,QAAQC,MAC1BR,EAAMU,YAAYC,GAAG,IAA2B,EAArBX,EAAMO,QAAQC,KAAW,GAAK,CACxDJ,MAAO,IACPE,WAAY,OACZG,YAAa,SAGjBG,MAAO,CACLC,UAAgC,EAArBb,EAAMO,QAAQC,KACzBH,QAAS,OACTS,cAAe,SACfC,WAAY,SACZC,QAAO,GAAAC,OAA0B,EAArBjB,EAAMO,QAAQC,KAAnB,OAAAS,OAAsD,EAArBjB,EAAMO,QAAQC,KAA/C,OAAAS,OACW,EADkDjB,EACjEO,QAAQC,KADJ,OAGTU,OAAQ,CACNC,OAAQnB,EAAMO,QAAQC,KACtBY,gBAAiBpB,EAAMqB,QAAQC,UAAUrB,MAE3CsB,KAAM,CACJnB,MAAO,OACPS,UAAWb,EAAMO,QAAQC,MAE3BgB,OAAQ,CACNX,UAAgC,EAArBb,EAAMO,QAAQC,QAsDdT,CAlDf,SAAgB0B,GAAO,IACbC,EAAYD,EAAZC,QAER,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,EAAQzB,MACvB0B,EAAAC,EAAAC,cAACE,EAAAH,EAAD,MACAD,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAOE,UAAWJ,EAAQd,OACxBe,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQE,UAAWJ,EAAQR,QACzBS,EAAAC,EAAAC,cAACK,EAAAN,EAAD,OAEFD,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,UAAU,KAAKC,QAAQ,MAAnC,WAGAV,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,EAAQH,MACvBI,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAaT,OAAO,SAASoB,UAAQ,EAACC,WAAS,GAC7Cb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAYc,QAAQ,SAApB,iBACAf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAOgB,GAAG,QAAQC,KAAK,QAAQC,aAAa,QAAQC,WAAS,KAE/DpB,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAaT,OAAO,SAASoB,UAAQ,EAACC,WAAS,GAC7Cb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAYc,QAAQ,YAApB,YACAf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEiB,KAAK,WACLG,KAAK,WACLJ,GAAG,WACHE,aAAa,sBAGjBnB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEsB,QAASvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAUwB,MAAM,WAAWC,MAAM,YAC1CC,MAAM,gBAER3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACEoB,KAAK,SACLR,WAAS,EACTH,QAAQ,YACRgB,MAAM,UACNvB,UAAWJ,EAAQF,QALrB,gBCrEKgC,mLALX,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,aAHYC,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5fa31d03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = theme => ({\r\n  main: {\r\n    width: \"auto\",\r\n    display: \"block\", // Fix IE 11 issue.\r\n    marginLeft: theme.spacing.unit * 3,\r\n    marginRight: theme.spacing.unit * 3,\r\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\r\n      width: 400,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\"\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing.unit * 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme\r\n      .spacing.unit * 3}px`\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing.unit,\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing.unit\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing.unit * 3\r\n  }\r\n});\r\n\r\nfunction SignIn(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <main className={classes.main}>\r\n      <CssBaseline />\r\n      <Paper className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form}>\r\n          <FormControl margin=\"normal\" required fullWidth>\r\n            <InputLabel htmlFor=\"email\">Email Address</InputLabel>\r\n            <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\r\n          </FormControl>\r\n          <FormControl margin=\"normal\" required fullWidth>\r\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n            <Input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n          </FormControl>\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign in\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </main>\r\n  );\r\n}\r\n\r\nSignIn.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(SignIn);\r\n","import React from \"react\";\r\nimport SignIn from \"./components/SignIn.js\"\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <SignIn />\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}